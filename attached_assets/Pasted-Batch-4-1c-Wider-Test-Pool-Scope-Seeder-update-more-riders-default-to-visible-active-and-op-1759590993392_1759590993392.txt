Batch 4.1c — Wider Test Pool
✅ Scope

Seeder update → more riders default to visible, active, and open prefs.

BuddyMatch logic refactor → “NoPref” = include all (only filter if explicit).

1️⃣ Seeder Update (/scripts/seed_users_criteria.ts)
import { faker } from "@faker-js/faker";
import { db } from "../db";
import { users } from "../db/schema";

async function seedUserCriteria() {
  const paceZones = ["Z1","Z2","Z3","Z4","NoPref"];
  const elevations = ["flat","rolling","hilly","NoPref"];
  const rideTypes = ["road","gravel","mtb","any"];
  const socialModes = ["social","solo","flexible"];

  for (let i = 0; i < 100; i++) {
    // Bias toward openness
    const active = faker.number.int({ min: 0, max: 100 }) < 70; // 70% active
    const visible = true; // everyone visible by default
    const pace = faker.number.int({ min: 0, max: 100 }) < 50 ? "NoPref" : faker.helpers.arrayElement(paceZones);
    const elevation = faker.number.int({ min: 0, max: 100 }) < 50 ? "NoPref" : faker.helpers.arrayElement(elevations);
    const rideType = faker.number.int({ min: 0, max: 100 }) < 40 ? "any" : faker.helpers.arrayElement(rideTypes);

    await db.insert(users).values({
      name: faker.person.firstName(),
      email: faker.internet.email(),
      ftp_watts: faker.number.int({ min: 150, max: 350 }),
      weight_kg: faker.number.float({ min: 55, max: 85, precision: 0.1 }),
      ftp_wkg: faker.number.float({ min: 2.2, max: 4.5, precision: 0.01 }),
      weekly_hours: faker.number.int({ min: 3, max: 18 }),
      pace_zone: pace,
      elevation_pref: elevation,
      max_distance_mi: faker.helpers.arrayElement([10,20,40,60,80,100]),
      ride_type_pref: rideType,
      social_pref: faker.helpers.arrayElement(socialModes),
      active_buddy_search: active,
      visible_in_passive_pool: visible,
      experience_years: faker.helpers.arrayElement(["0-2","2-5","5+"]),
      radius_group_mi: faker.helpers.arrayElement([20,40,60]),
      radius_buddy_mi: faker.helpers.arrayElement([40,60,80]),
    });
  }
  console.log("✅ Seeded 100 users with broader defaults (70% active, 100% visible, many NoPref).");
}

seedUserCriteria().then(() => process.exit(0));

2️⃣ BuddyMatch Filter Logic

Replace your criteriaMatch with this:

function criteriaMatch(a: any, b: any) {
  // Only filter if preference is explicit (not NoPref/any)
  if (a.pace_zone && a.pace_zone !== "NoPref" && b.pace_zone !== a.pace_zone) return false;
  if (a.elevation_pref && a.elevation_pref !== "NoPref" && b.elevation_pref !== a.elevation_pref) return false;
  if (a.ride_type_pref && a.ride_type_pref !== "any" && b.ride_type_pref !== a.ride_type_pref) return false;
  if (a.max_distance_mi && b.max_distance_mi && Math.abs(a.max_distance_mi - b.max_distance_mi) > 60) return false;
  return true;
}


📌 Key change: if rider sets "NoPref" or "any", the filter does nothing — candidate is included.

3️⃣ Replit Instructions
# 1. Apply schema updates if needed
npx drizzle-kit push

# 2. Clear and reseed
npx tsx scripts/seed_users_criteria.ts

# 3. Run app
npm run dev

# 4. Test Buddy Finder
http://localhost:5173/buddies/search